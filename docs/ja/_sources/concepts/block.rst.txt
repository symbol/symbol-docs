#####
Block
#####

The central element of every cryptocurrency is a public ledger called the **blockchain**, which links blocks together.

Since the blocks in the chain are ordered, the complete :doc:`transaction <transaction>` history is held on the blockchain.
Subsequent blocks have increasing heights that differ by one.
Each block can contain up to ``6,000`` transactions (public network), being this value :ref:`configurable per network <config-network-properties>`.

|codename| blocks complete every ``30`` seconds, making transactions confirm quickly enough for everyday use.

******
Header
******

Nodes stores blocks in a serialized form as follows:

**Version**: 0x01

**EntityType**: 0x8143

**Inlines:**

* :ref:`SizePrefixedEntity <sizeprefixedentity>`
* :ref:`VerifiableEntity <verifiableentity>`
* :ref:`EntityBody <entitybody>`

.. _block-header:

.. csv-table::
    :header: "Property", "Type", "Description"
    :delim: ;
    :widths: 30 30 40

    height; :schema:`Height <types.cats>`; Height of the blockchain. Each block has a unique height. Subsequent blocks differ in height by 1.
    timestamp; :schema:`Timestamp <types.cats>`; Number of milliseconds elapsed since the creation of the nemesis block.
    difficulty; :schema:`Difficulty <types.cats>`; Determines how difficult is to find a new block, based on previous blocks.
    generationHashProof; :schema:`VrfProof <block.cats>`; Generation hash proof.
    previousBlockHash; :schema:`Hash256 <types.cats>`; Hash of the previous block.
    transactionsHash; :schema:`Hash256 <types.cats>`; Hash of the transactions in this block.
    receiptsHash; :schema:`Hash256 <types.cats>`;  Hash of the receipts generated by this block.
    stateHash; :schema:`Hash256 <types.cats>`;   Hash of the global chain state at this block.
    beneficiaryAddress ; :schema:`Address <types.cats>`; Address of the optional beneficiary designated by harvester.
    feeMultiplier; :schema:`BlockFeeMultiplier <types.cats>` ; Fee multiplier applied to block transactions.
    blockHeader_Reserved1; uint32; Reserved padding to align end of BlockHeader on 8-byte boundary.

.. |merkle| raw:: html

    <a href="https://en.wikipedia.org/wiki/Merkle_tree" target="_blank">merkle tree</a>

.. |patricia| raw:: html

   <a href="https://en.wikipedia.org/wiki/Radix_tree" target="_blank">patricia tree</a>

.. _block-creation:

********
Creation
********

|codename| calls the first block in the chain the **nemesis block**.
The first block is defined before launching a new network and sets the distribution of the network currency mosaics.

The process of creating the subsequent new blocks is called :doc:`harvesting <harvesting>`.

Blocks are created by :doc:`accounts <account>`, which are chosen by the :doc:`consensus algorithm <consensus-algorithm>` based on their importance score.
The consensus algorithm determines a new account to harvest the subsequent block after each block creation.

The harvesting account receives the :doc:`fees <fees>` for the transactions added in the block and the mosaics created by :doc:`inflation <inflation>`.
This gives the harvester an incentive to add as many transactions to the block as possible.

.. _rollbacks:

*********
Rollbacks
*********

To ensure fast response times, the |codename| blockchain is designed in a way that, in the presence of a network failure or partition, requests are still answered, and transactions added to the blockchain.

This naturally leads to **forks**, this is, different chains are created in the disconnected parts of the network. Once connectivity is restored **fork resolution** takes place to merge the divergent chains into a single one.

This process might require that some blocks are **rolled back**: they are removed from the blockchain so all their transactions move to the **unconfirmed** state and have to be :ref:`validated <transaction-validation>` again. At this point there's a chance that their deadlines expire without ever being confirmed again.

For this reason, **confirmed** transactions (which have already been added to the blockchain) cannot be relied upon until their block is :ref:`finalized <finalization>`, as shown below.

.. _finalization:

************
Finalization
************

This is the process of making changes on a blockchain ledger permanent.
Before blocks reach finality, they still might need to be rolled back in the presence of a network failure or partition. However, once blocks are finalized, they become immutable.

Finalization occurs in rounds. In each round, a **sorting algorithm** selects the accounts responsible for validating all blocks pending finalization. If a proposed block matches an account's node's records, the account emits a positive vote.

Once **more than 67% of the stakes** selected for voting have emitted positive votes, the block becomes finalized. At that point the transactions linked to the block are permanently recorded on the blockchain.

.. note::
    In order to be eligible as a voter, an account must:

    * Be the owner of a node.
    * Have at least :ref:`minVoterBalance <config-network-properties>` network currency units.
    * Be registered as a voter by announcing a :ref:`votingkeylinktransaction` to the network.

When there is low connectivity, or many bad actors, finalization can take longer than usual and create large :ref:`rollbacks`. However, no finalized block will ever be rolled back.

Thus, clients that rely on the immutability of the blockchain history should only trust **transactions from finalized blocks**.

Finalization rounds are actually called **Epochs** and happen every **1440 blocks** or about **12h** (see ``votingSetGrouping`` in the :ref:`network properties <config-network-properties>`). Each Epoch is divided in multiple **Finalization Points** (See the |techref| section 15.2 for more details).

********************
Related transactions
********************

.. csv-table::
    :header:  "Id",  "Type", "Description"
    :widths: 20 30 50
    :delim: ;

    0x4143; :ref:`votingkeylinktransaction`; Link an account with a BLS public key. Required for node operators willing to vote finalized blocks.

**************
Related guides
**************

.. postlist::
    :category: Block
    :date: %A, %B %d, %Y
    :format: {title}
    :list-style: circle
    :excerpts:
    :sort:

