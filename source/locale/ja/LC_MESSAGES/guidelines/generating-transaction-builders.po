# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2018-present, NEM
# This file is distributed under the same license as the symbol-docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Yoshiyuki Ieyama <yukku0423+github@gmail.com>, 2021
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: symbol-docs 0.22.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-10-30 22:34+0000\n"
"PO-Revision-Date: 2019-06-04 17:23+0000\n"
"Last-Translator: Yoshiyuki Ieyama <yukku0423+github@gmail.com>, 2021\n"
"Language-Team: Japanese (https://www.transifex.com/nemtech/teams/95744/ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../source/guidelines/generating-transaction-builders.rst:3
msgid "Generating transaction builders"
msgstr "トランザクションビルダの生成"

#: ../../source/guidelines/generating-transaction-builders.rst:5
msgid ""
"Learn how to generate transaction builders for your target SDK language."
msgstr "ターゲットとする SDK 用言語のトランザクションビルダを生成する方法を学習します。"

#: ../../source/guidelines/generating-transaction-builders.rst:9
msgid "Background"
msgstr "背景"

#: ../../source/guidelines/generating-transaction-builders.rst:11
msgid ""
"The `catbuffer library <https://github.com/symbol/catbuffer-generators>`_ "
"defines the protocol to serialize and deserialize |codename| entities. The "
"library comes with code generators for different languages. SDKs and "
"applications use the generated code to interact with REST transaction "
"endpoint."
msgstr ""
"`catbuffer ライブラリ <https://github.com/symbol/catbuffer-generators>`_ は "
"|codename| のエンティティをシリアライズ/デシリアライズするプロトコルを定義します。SDK とアプリケーションは REST "
"トランザクションエンドポイントと疎通するために生成されたコードを利用します。"

#: ../../source/guidelines/generating-transaction-builders.rst:19
msgid "|sdk| serialization module"
msgstr "|sdk| シリアル化モジュール"

#: ../../source/guidelines/generating-transaction-builders.rst:21
msgid "The library accomplishes the following properties:"
msgstr "このライブラリは以下の特性を達成します:"

#: ../../source/guidelines/generating-transaction-builders.rst:23
msgid "**Memory Efficiency**"
msgstr "**効率的なメモリ使用**"

#: ../../source/guidelines/generating-transaction-builders.rst:25
msgid ""
"Large networks compute a large number of transactions. Working with binary "
"optimized in size makes the communication faster. Furthermore, reading "
"entities from memory buffers—or just a part of them—is memory efficient."
msgstr ""
"大きなネットワークはたくさんのトランザクションを計算します。バイナリに最適化された仕事はコミュニケーションを高速にします。さらに、メモリバッファからのエンティティ"
" - またはそれらの一部 - の読み込みはメモリを効率的に使用します。"

#: ../../source/guidelines/generating-transaction-builders.rst:29
msgid "**Flexibility**"
msgstr "**柔軟性**"

#: ../../source/guidelines/generating-transaction-builders.rst:31
msgid ""
"REST `transaction endpoints <https://docs.symbolplatform.com/symbol-"
"openapi/v0.11.3/#operation/announceTransaction>`_ handle the calls to update"
" the blockchain state. The serialized payload of a transaction is appended "
"to the body of the POST call. These endpoints allow the addition of new "
"functionality to the client-side without modifying the API contract."
msgstr ""
"REST `トランザクションエンドポイント <https://docs.symbolplatform.com/symbol-"
"openapi/v0.11.3/#operation/announceTransaction>`_ "
"はブロックチェーンの状態を更新する呼び出しをハンドリングします。シリアライズされたトランザクションのペイロードは POST "
"呼び出しのボディに追加されます。これらのエンドポイントにより、API 規約を変更せずにクライアントへ新しい機能を追加することができます。"

#: ../../source/guidelines/generating-transaction-builders.rst:35
msgid "**Reusability**"
msgstr "**再利用性**"

#: ../../source/guidelines/generating-transaction-builders.rst:37
msgid ""
"Applications can embed the generated code without managing dependencies, "
"which is particularly desirable in highly-secure environments. Besides, "
"sharing a common codebase enables the addition of new features with less "
"effort."
msgstr ""
"アプリケーションは依存性の管理することなく、生成されたコードを組み込むことができ、安全性の高い環境において、特に望ましいです。さらに共通のコードベースを共有することは、より少ない労力で新しい機能を追加することを可能にします。"

#: ../../source/guidelines/generating-transaction-builders.rst:40
msgid ""
"The `schemas <https://github.com/symbol/catbuffer-"
"schemas/tree/main/symbol>`_ define the entities' data structure. The library"
" generates the leanest code necessary to serialize and deserialize defined "
"entities."
msgstr ""
"`スキーマ <https://github.com/symbol/catbuffer-schemas/tree/main/symbol>`_ "
"はエンティティのデータ構造を定義します。このライブラリは定義済みエンティティを、シリアライズまたはデシリアライズするために必要な最低限のコードを生成します。"

#: ../../source/guidelines/generating-transaction-builders.rst:45
msgid "Installation"
msgstr "インストール"

#: ../../source/guidelines/generating-transaction-builders.rst:47
msgid "Clone the ``catbuffer-generators`` repository."
msgstr "``catbuffer-generators`` リポジトリをクローンしてください。"

#: ../../source/guidelines/generating-transaction-builders.rst:53
msgid "Install the package requirements."
msgstr "必須パッケージをインストール"

#: ../../source/guidelines/generating-transaction-builders.rst:59
msgid ""
"Clone the ``catbuffer-schemas`` repository inside the ``catbuffer-"
"generators`` folder."
msgstr "``catbuffer-schemas`` リポジトリを ``catbuffer-generators`` の中にクローンしてください。"

#: ../../source/guidelines/generating-transaction-builders.rst:67
msgid "Usage"
msgstr "使い方"

#: ../../source/guidelines/generating-transaction-builders.rst:70
msgid ""
"Under the ``catbuffer-schemas`` folder of the catbuffer repository, you can "
"find the entities' data structure. With the help of a code generator, you "
"can produce the leanest code necessary to serialize and deserialize those "
"entities."
msgstr ""
"catbuffer リポジトリの ``catbuffer-schemas`` "
"フォルダーの下にエンティティのデータ構造があります。コードジェネレーターを使用すると、これらのエンティティをシリアル化および逆シリアル化するために必要な、最もリーンなコードを生成できます。"

#: ../../source/guidelines/generating-transaction-builders.rst:72
msgid ""
"For example, run the following command to generate C++ transaction builders "
"for a :ref:`transfertransaction`:"
msgstr "例えば、次のコマンドを実行して :ref:`transfertransaction` の C++ トランザクションビルダを生成します:"

#: ../../source/guidelines/generating-transaction-builders.rst:78
msgid ""
"You can also generate code for all the schemas running the following command"
" under the ``catbuffer-generators`` directory:"
msgstr ""
"``catbuffer-generators`` ディレクトリで次のコマンドを実行することで、すべてのスキーマのコードを生成することもできます:"

#: ../../source/guidelines/generating-transaction-builders.rst:84
msgid ""
"The generator creates a new file for every schema under the "
"``catbuffer/_generated/cpp_builder`` folder."
msgstr ""
"ジェネレータは ``catbuffer/_generated/cpp_builder`` フォルダの下に各スキーマの新しいファイルを作成します。"
