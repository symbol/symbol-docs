# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2018-present, NEM
# This file is distributed under the same license as the symbol-docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# David García <dgarcia360@outlook.com>, 2019
# Yoshiyuki Ieyama <yukku0423+github@gmail.com>, 2020
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: symbol-docs 0.22.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-10-30 22:34+0000\n"
"PO-Revision-Date: 2019-09-30 13:12+0000\n"
"Last-Translator: Yoshiyuki Ieyama <yukku0423+github@gmail.com>, 2020\n"
"Language-Team: Japanese (https://www.transifex.com/nemtech/teams/95744/ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../source/guides/monitor/turning-the-asynchronous-transaction-announcement-into-synchronous.rst:9
msgid "Turning the asynchronous transaction announcement into synchronous"
msgstr "非同期なトランザクションのアナウンスを同期的に変える"

#: ../../source/guides/monitor/turning-the-asynchronous-transaction-announcement-into-synchronous.rst:11
msgid ""
"Handy snippet to announce a transaction and wait until this is confirmed."
msgstr "トランザクションをアナウンスして、承認されるまで待つ便利なスニペット。"

#: ../../source/guides/monitor/turning-the-asynchronous-transaction-announcement-into-synchronous.rst:15
msgid "Use case"
msgstr "ユースケース"

#: ../../source/guides/monitor/turning-the-asynchronous-transaction-announcement-into-synchronous.rst:17
msgid ""
"When announcing a transaction in NIS1, you had to wait to get the response "
"from the node. |codename| works differently: when a transaction is "
"announced, the REST API server will always return an OK. As a result, the "
"developer does not have to wait until the server returns a response, being "
"able to make more responsive apps. However, now is the developer's "
"responsibility to check the status of the transaction and ensure it is "
"confirmed."
msgstr ""
"NIS1 ではトランザクションがアナウンスされると、ノードからのレスポンスを待たなければいけませんでした。 |codename| "
"では異なる動作をします。トランザクションがアナウンスされると、REST API は常に OK "
"レスポンスを返します。これにより開発者はサーバがレスポンスを返却するのを待つ必要がなく、よりレスポンシブなアプリケーションの開発を可能になりました。しかし、トランザクションの状態や承認されたことを確認するのは開発者の責務になります。"

#: ../../source/guides/monitor/turning-the-asynchronous-transaction-announcement-into-synchronous.rst:22
msgid ""
"The negative aspect of announcing transactions asynchronously is that it "
"adds unnecessary complexity to small projects. The |sdk| "
"``TransactionService`` aims to solve this problem by providing a function "
"that waits for the confirmation or rejection of the transaction."
msgstr ""
"非同期的トランザクションのデメリットとして、小規模なプロジェクトを不必要に複雑にしてしまう場合があります。 |sdk| "
"``TransactionService`` がトランザクションの承認または却下を待機する機能を提供することでこの問題を解決します。"

#: ../../source/guides/monitor/turning-the-asynchronous-transaction-announcement-into-synchronous.rst:27
msgid "Prerequisites"
msgstr "前提条件"

#: ../../source/guides/monitor/turning-the-asynchronous-transaction-announcement-into-synchronous.rst:29
msgid ""
"Complete :doc:`sending mosaics and messages between two accounts "
"<../transfer/sending-a-transfer-transaction>` guide."
msgstr ""
":doc:`モザイクとメッセージを２つのアカウント間で送信する <../transfer/sending-a-transfer-"
"transaction>` ガイドを完了している"

#: ../../source/guides/monitor/turning-the-asynchronous-transaction-announcement-into-synchronous.rst:30
msgid "Create a new :ref:`account <setup-creating-a-test-account>`."
msgstr "新しい :ref:`アカウント <setup-creating-a-test-account>` を作成します。"

#: ../../source/guides/monitor/turning-the-asynchronous-transaction-announcement-into-synchronous.rst:31
msgid ""
"Load the account with enough |networkcurrency| to pay for transaction fees."
msgstr "アカウントに手数料を支払うために十分な |networkcurrency| を入金してください。"

#: ../../source/guides/monitor/turning-the-asynchronous-transaction-announcement-into-synchronous.rst:35
msgid "Sending a synchronous transaction"
msgstr "同期的トランザクションの送信"

#: ../../source/guides/monitor/turning-the-asynchronous-transaction-announcement-into-synchronous.rst:37
msgid ""
"Alice is developing an app to send 10 |privatenetworkcurrency| to Bob and "
"wants to know if the transaction has reached the network before sending Bob "
"an email."
msgstr ""
"Alice は Bob に 10 |privatenetworkcurrency| を送るアプリケーションを開発しています。彼女は Bob "
"にメールを送る前に、トランザクションがネットワークに到着したかどうかを知ろうとしています。"

#: ../../source/guides/monitor/turning-the-asynchronous-transaction-announcement-into-synchronous.rst:39
msgid ""
"Create a new ``.ts`` file. Then, define and sign a :doc:`TransferTransaction"
" <../../concepts/transfer-transaction>`."
msgstr ""
"新しい ``.ts`` ファイルを作成して :doc:`TransferTransaction <../../concepts/transfer-"
"transaction>` を定義し署名します。"

#: ../../source/guides/monitor/turning-the-asynchronous-transaction-announcement-into-synchronous.rst:53
msgid ""
"Once signed, :doc:`announce the transaction <../../concepts/transaction>` "
"using ``TransactionService.announce`` instead of "
"``TransactionHttp.announce``."
msgstr ""
"署名したら、 ``TransactionHttp.announce`` の代わりに ``TransactionService.announce`` "
"を使用して :doc:`トランザクションをアナウンス <../../concepts/transaction>` します。"

#: ../../source/guides/monitor/turning-the-asynchronous-transaction-announcement-into-synchronous.rst:67
msgid ""
"The function ``TransactionService.announce()`` will respond successfully if "
"the transaction reaches the network and does not have validation errors. You"
" might still need to :doc:`wait for several confirmations  "
"<../../concepts/transaction>` before executing additional actions."
msgstr ""
"この関数 ``TransactionService.announce()`` "
"トランザクションがネットワークに到達し、バリデーションエラーが発生しなければ、成功レスポンスを返します。まだ次のアクションを起こす前に、 "
":doc:`いくらかの承認を待つ  <../../concepts/transaction>` 必要があるかもしれません。"
