# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2018-present, NEM
# This file is distributed under the same license as the symbol-docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Yoshiyuki Ieyama <yukku0423+github@gmail.com>, 2021
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: symbol-docs 0.22.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-10-22 06:48+0000\n"
"PO-Revision-Date: 2020-06-19 17:53+0000\n"
"Last-Translator: Yoshiyuki Ieyama <yukku0423+github@gmail.com>, 2021\n"
"Language-Team: Japanese (https://www.transifex.com/nemtech/teams/95744/ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../source/serialization/lock_secret.rst:3
msgid "Lock Secret Schemas"
msgstr "ロックシークレットスキーマ"

#: ../../source/serialization/lock_secret.rst:5
msgid ""
"The `catbuffer schemas <https://github.com/symbol/catbuffer-schemas>`_ "
"repository defines how each transaction type should be serialized. In "
"combination with the `catbuffer-generators <https://github.com/symbol"
"/catbuffer-generators>`_ project, developers can generate builder classes "
"for a given set of programming languages."
msgstr ""
"`catbuffer スキーマ <https://github.com/symbol/catbuffer-schemas>`_ "
"リポジトリは各トランザクションタイプがどのようにシリアライズされるべきかを定義しています。 `catbuffer-generators "
"<https://github.com/symbol/catbuffer-generators>`_ "
"プロジェクトと組み合わせると、開発者は特定のプログラミング言語用のビルダークラスを生成できます。"

#: ../../source/serialization/lock_secret.rst:9
msgid "Lock Secret Types"
msgstr "ロックシークレットタイプ"

#: ../../source/serialization/lock_secret.rst:16
msgid "The list of supported hashing algorithms."
msgstr "サポートされているハッシュアルゴリズムのリスト"

#: ../../source/serialization/lock_secret.rst:1
msgid "Proof is hashed using SHA3-256."
msgstr "SHA3-256 によってハッシュ化された proof"

#: ../../source/serialization/lock_secret.rst:1
msgid ""
"Proof is hashed twice: first with SHA-256 and then with RIPEMD-160 "
"(bitcoin's OP_HASH160)."
msgstr ""
"最初に SHA-256 を、その後 RIPEMD-160 によって2回のハッシュ化された proof (bitcoin's OP_HASH160)"

#: ../../source/serialization/lock_secret.rst:1
msgid "Proof is hashed twice with SHA-256 (bitcoin's OP_HASH256)."
msgstr "SHA-256 によって2回のハッシュ化されたproof (bitcoin's OP_HASH256)"

#: ../../source/serialization/lock_secret.rst:37
msgid ""
"Use a SecretLockTransaction to transfer mosaics between two accounts. The "
"mosaics sent remain locked until a valid :ref:`SecretProofTransaction "
"<secret-proof-transaction>` unlocks them."
msgstr ""
"2 つのアカウント間でモザイクを転送するにはSecretLockTransactionを使用します。送信したモザイクは妥当な "
":ref:`SecretProofTransaction <secret-proof-transaction>` "
"がアンロックするまで、ロックされたままになります。"

#: ../../source/serialization/lock_secret.rst:40
msgid ""
"The maximum number of blocks the lock can lie up to is ``30 days``, being "
"this parameter :ref:`configurable per network <config-network-properties>`. "
"If the transaction duration is reached without being proved, the locked "
"amount goes back to the initiator of the SecretLockTransaction."
msgstr ""
"ロックできるブロックの最大数は ``30日間`` です。このパラメータは :ref:`ネットワークごとに設定可能 <config-network-"
"properties>` "
"です。トランザクションが証明されずに期間に到達した場合、ロックされた総量はSecretLockTransactionを開始したアカウントへ戻ります。"

#: ../../source/serialization/lock_secret.rst:49
#: ../../source/serialization/lock_secret.rst:80
msgid ""
":ref:`Transaction <transaction>` or :ref:`EmbeddedTransaction <embedded-"
"transaction>`"
msgstr ""
":ref:`Transaction <transaction>` または :ref:`EmbeddedTransaction <embedded-"
"transaction>`"

#: ../../source/serialization/lock_secret.rst:1
#: ../../source/serialization/lock_secret.rst:1
msgid "Property"
msgstr "プロパティ"

#: ../../source/serialization/lock_secret.rst:1
#: ../../source/serialization/lock_secret.rst:1
msgid "Address that receives the funds once unlocked."
msgstr "ロック解除後、ファンドを受け取るアドレス"

#: ../../source/serialization/lock_secret.rst:1
#: ../../source/serialization/lock_secret.rst:1
msgid "Proof hashed."
msgstr "ハッシュ化された証明"

#: ../../source/serialization/lock_secret.rst:1
msgid "Locked mosaic."
msgstr "ロックされたモザイク"

#: ../../source/serialization/lock_secret.rst:1
msgid ""
"Number of blocks for which a lock should be valid. If reached, the mosaics "
"will be returned to the initiator."
msgstr "ロックを有効にするブロックの数。期間は ``30`` 日までが許可されています。"

#: ../../source/serialization/lock_secret.rst:1
#: ../../source/serialization/lock_secret.rst:1
msgid "Algorithm used to hash the proof."
msgstr "proof に使用されているハッシュアルゴリズム"

#: ../../source/serialization/lock_secret.rst:63
msgid "Secret Proof"
msgstr "シークレットプルーフ"

#: ../../source/serialization/lock_secret.rst:70
msgid ""
"Use a SecretProofTransaction to unlock :ref:`SecretLockTransactions <secret-"
"lock-transaction>`."
msgstr ""
"SecretProofTransactionは :ref:`SecretLockTransactions <secret-lock-"
"transaction>` のアンロックに使用します。"

#: ../../source/serialization/lock_secret.rst:72
msgid ""
"The transaction must prove knowing the *proof* that unlocks the mosaics."
msgstr "トランザクションはモザイクをアンロックするための *proof* を知っていることを証明しなければなりません。"

#: ../../source/serialization/lock_secret.rst:1
msgid "Proof size in bytes."
msgstr "バイト換算のプルーフサイズ"

#: ../../source/serialization/lock_secret.rst:1
msgid "Original random set of bytes."
msgstr "元のランダムなバイト列"
